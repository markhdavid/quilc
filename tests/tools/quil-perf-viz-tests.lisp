;;;; quil-perf-viz-tests.lisp
;;;;
;;;; Author: Mark David

(in-package #:cl-quil.tools-tests)

(defparameter *perf-viz-test-info*
  '(((:bell :fully-connected (:baseline :new-walker))
     "2021-10-09-benchmark-nq-data-perf-viz-1")
    ((:qft :linear (:baseline :new-walker))
     "2021-10-09-benchmark-nq-data-perf-viz-2"))
  "A-list with entries of the form (lookup-args file-name-string),
   where lookup-args is a list of the form (program-type chip-type
   opt-names), which should correspond to the args to
   LOOK-UP-CHART-DEF, and file-name-string is a string giving the name
   of a file that has as contents the JSON source corresponding to the
   vega-lite chart generated by the function corresponding to
   lookup-args.")

;; Note: when either data changes in the source file, we generally
;; must recreate the test data files. Do so by generating a vega-lite
;; embedded chart, then, from the "..." menu at upper-right, choose
;; View Source, and then place the resulting text into the
;; corresponding test data file.  For example, to regenerate the
;; vega-lite embedded chart for the first entry above, evaluate
;; 
;;   (funcall (look-up-chart-def :bell :fully-connected '(:baseline :new-walker)))
;;
;; That pops you into a browser showing the Vega-Lite chart. Then do
;; View Source. Then copy the resulting JSON source into the file
;; "2021-10-09-benchmark-nq-data-perf-viz-1.json" in this directory.



(defun get-perf-viz-json-pathname (base-file-name)  
  (make-pathname
   :name base-file-name
   :type "json"
   :defaults (cl-quil.tools::get-tests-tools-system-relative-pathname)))

(defun get-json-of-test-function (fn)
  (let ((plot-op-json-string (funcall fn :mode ':immediate)))
    (cl-json:decode-json-from-string plot-op-json-string)))

(defun get-json-of-test-file (file-name)
  (let ((pathname (get-perf-viz-json-pathname file-name)))
    (with-open-file (in pathname) 
      (cl-json:decode-json in))))
  

(deftest perf-viz-test ()
  (loop :for ((program-type chip-type opt-names) file-name)
          :in *perf-viz-test-info*
        :as fn
          := (cl-quil.tools:look-up-chart-def program-type chip-type opt-names)
        :as x := (get-json-of-test-function fn)
        :as y := (get-json-of-test-file file-name)
        :do (is (equalp x y))))
